import React from 'react';
import { render } from '@testing-library/react';
import { screen, fireEvent } from '@testing-library/dom';
import { VulnerabilityList } from '../VulnerabilityList';

const mockVulnerabilities = [
  {
    id: 'vuln_1',
    cve_id: 'CVE-2021-44228',
    cvss_score: 10.0,
    severity: 'critical' as const,
    description: 'Apache Log4j2 Remote Code Execution Vulnerability',
    remediation: 'Upgrade to Log4j 2.17.0 or later',
    exploit_available: true,
    cisa_kev: true,
    references: [
      {
        url: 'https://nvd.nist.gov/vuln/detail/CVE-2021-44228',
        source: 'NVD',
      },
    ],
    published_date: '2021-12-10T00:00:00Z',
    created_at: '2025-01-01T00:00:00Z',
    updated_at: '2025-01-01T00:00:00Z',
  },
  {
    id: 'vuln_2',
    cve_id: 'CVE-2021-23017',
    cvss_score: 8.1,
    severity: 'high' as const,
    description: 'DNS resolver off-by-one heap write',
    exploit_available: false,
    cisa_kev: false,
    references: [],
    created_at: '2025-01-01T00:00:00Z',
    updated_at: '2025-01-01T00:00:00Z',
  },
];

describe('VulnerabilityList', () => {
  test('renders vulnerability list with CVE IDs', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    expect(screen.getByText('CVE-2021-44228')).toBeInTheDocument();
    expect(screen.getByText('CVE-2021-23017')).toBeInTheDocument();
  });

  test('displays severity badges correctly', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    const criticalBadge = screen.getByText('critical', { selector: '.bg-red-600' });
    const highBadge = screen.getByText('high', { selector: '.bg-orange-600' });

    expect(criticalBadge).toBeInTheDocument();
    expect(highBadge).toBeInTheDocument();
  });

  test('shows CISA KEV flag prominently', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    expect(screen.getByText('CISA KEV')).toBeInTheDocument();
  });

  test('shows exploit available indicator', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    expect(screen.getByText('Exploit Available')).toBeInTheDocument();
  });

  test('displays CVSS scores', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    expect(screen.getByText('10.0')).toBeInTheDocument();
    expect(screen.getByText('8.1')).toBeInTheDocument();
  });

  test('expands vulnerability details on click', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    // Initially, remediation should not be visible
    expect(screen.queryByText('Remediation')).not.toBeInTheDocument();

    // Click to expand
    fireEvent.click(screen.getAllByText('Show details')[0]);

    // Remediation should now be visible
    expect(screen.getByText('Remediation')).toBeInTheDocument();
    expect(screen.getByText('Upgrade to Log4j 2.17.0 or later')).toBeInTheDocument();
  });

  test('renders external reference links', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    // Expand to see references
    fireEvent.click(screen.getAllByText('Show details')[0]);

    const nvdLink = screen.getByText('NVD');
    expect(nvdLink).toBeInTheDocument();
    expect(nvdLink.closest('a')).toHaveAttribute('href', 'https://nvd.nist.gov/vuln/detail/CVE-2021-44228');
    expect(nvdLink.closest('a')).toHaveAttribute('target', '_blank');
  });

  test('shows loading state', () => {
    render(<VulnerabilityList vulnerabilities={[]} loading={true} />);

    // Should show skeleton loaders
    const skeletons = screen.getAllByRole('status', { hidden: true });
    expect(skeletons.length).toBeGreaterThan(0);
  });

  test('shows empty state when no vulnerabilities', () => {
    render(<VulnerabilityList vulnerabilities={[]} />);

    expect(screen.getByText('No vulnerabilities identified')).toBeInTheDocument();
  });

  test('collapses expanded vulnerability when clicking again', () => {
    render(<VulnerabilityList vulnerabilities={mockVulnerabilities} />);

    // Expand
    fireEvent.click(screen.getAllByText('Show details')[0]);
    expect(screen.getByText('Remediation')).toBeInTheDocument();

    // Collapse
    fireEvent.click(screen.getByText('Hide details'));
    expect(screen.queryByText('Remediation')).not.toBeInTheDocument();
  });
});
