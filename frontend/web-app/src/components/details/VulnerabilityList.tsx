import React, { useState } from 'react';

interface Reference {
  url: string;
  source: string;
}

interface Vulnerability {
  id: string;
  cve_id?: string;
  cvss_score?: number;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  description: string;
  remediation?: string;
  exploit_available: boolean;
  references: Reference[];
  cisa_kev: boolean;
  published_date?: Date | string;
  created_at: Date | string;
  updated_at: Date | string;
}

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
  loading?: boolean;
}

export const VulnerabilityList: React.FC<VulnerabilityListProps> = ({ vulnerabilities, loading }) => {
  const [expandedId, setExpandedId] = useState<string | null>(null);

  const getSeverityBadge = (severity: string) => {
    const severityStyles = {
      critical: 'bg-red-600 text-white border-red-500',
      high: 'bg-orange-600 text-white border-orange-500',
      medium: 'bg-yellow-600 text-white border-yellow-500',
      low: 'bg-blue-600 text-white border-blue-500',
      info: 'bg-gray-600 text-white border-gray-500',
    };
    return severityStyles[severity as keyof typeof severityStyles] || 'bg-gray-600 text-white border-gray-500';
  };

  const toggleExpanded = (id: string) => {
    setExpandedId(expandedId === id ? null : id);
  };

  if (loading) {
    return (
      <div className="animate-pulse space-y-3">
        <div className="h-20 bg-gray-700 rounded"></div>
        <div className="h-20 bg-gray-700 rounded"></div>
        <div className="h-20 bg-gray-700 rounded"></div>
      </div>
    );
  }

  if (!vulnerabilities || vulnerabilities.length === 0) {
    return (
      <div className="text-gray-400 text-center py-8 bg-gray-800 rounded border border-gray-700">
        <svg
          className="w-12 h-12 mx-auto mb-3 text-gray-600"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
          />
        </svg>
        <p className="text-sm">No vulnerabilities identified</p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {vulnerabilities.map((vuln) => {
        const isExpanded = expandedId === vuln.id;

        return (
          <div
            key={vuln.id}
            className="bg-gray-800 border border-gray-700 rounded-lg overflow-hidden hover:border-gray-600 transition-colors"
          >
            {/* Vulnerability Header */}
            <div
              className="p-4 cursor-pointer"
              onClick={() => toggleExpanded(vuln.id)}
            >
              <div className="flex items-start justify-between gap-3">
                {/* Left Section - CVE and Description */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2 mb-2 flex-wrap">
                    {vuln.cve_id && (
                      <span className="font-mono text-sm font-semibold text-gray-100">
                        {vuln.cve_id}
                      </span>
                    )}

                    {vuln.cisa_kev && (
                      <span className="inline-flex items-center gap-1 bg-red-700 text-white px-2 py-0.5 rounded text-xs font-bold">
                        <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        CISA KEV
                      </span>
                    )}

                    {vuln.exploit_available && (
                      <span className="inline-flex items-center gap-1 bg-orange-700 text-white px-2 py-0.5 rounded text-xs font-semibold">
                        <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clipRule="evenodd" />
                        </svg>
                        Exploit Available
                      </span>
                    )}
                  </div>

                  <p className="text-sm text-gray-300 line-clamp-2">
                    {vuln.description}
                  </p>
                </div>

                {/* Right Section - Score and Severity */}
                <div className="flex flex-col items-end gap-2 flex-shrink-0">
                  <span className={`px-3 py-1 rounded text-xs font-bold uppercase ${getSeverityBadge(vuln.severity)}`}>
                    {vuln.severity}
                  </span>
                  {vuln.cvss_score !== undefined && (
                    <div className="text-right">
                      <div className="text-xs text-gray-400">CVSS</div>
                      <div className="text-lg font-bold text-gray-100">{vuln.cvss_score.toFixed(1)}</div>
                    </div>
                  )}
                </div>
              </div>

              {/* Expand Indicator */}
              <div className="mt-2 text-xs text-blue-400 flex items-center gap-1">
                <span>{isExpanded ? 'Hide' : 'Show'} details</span>
                <svg
                  className={`w-4 h-4 transition-transform ${isExpanded ? 'rotate-180' : ''}`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>

            {/* Expanded Content */}
            {isExpanded && (
              <div className="border-t border-gray-700 p-4 bg-gray-900/50 space-y-4">
                {/* Full Description */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-300 mb-2">Description</h4>
                  <p className="text-sm text-gray-400">{vuln.description}</p>
                </div>

                {/* Remediation */}
                {vuln.remediation && (
                  <div>
                    <h4 className="text-sm font-semibold text-gray-300 mb-2">Remediation</h4>
                    <p className="text-sm text-gray-400">{vuln.remediation}</p>
                  </div>
                )}

                {/* References */}
                {vuln.references && vuln.references.length > 0 && (
                  <div>
                    <h4 className="text-sm font-semibold text-gray-300 mb-2">References</h4>
                    <ul className="space-y-1">
                      {vuln.references.map((ref, idx) => (
                        <li key={idx}>
                          <a
                            href={ref.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-sm text-blue-400 hover:text-blue-300 underline flex items-center gap-1"
                          >
                            <span>{ref.source || 'Reference'}</span>
                            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Metadata */}
                {vuln.published_date && (
                  <div className="text-xs text-gray-500">
                    Published: {new Date(vuln.published_date).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })}
                  </div>
                )}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};
