from typing import List, Optional, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import and_

from models.service_vulnerability import ServiceVulnerability, ConfidenceLevel, ValidationMethod
from models.vulnerability import Vulnerability
from models.service import Service
from .base import BaseRepository


class ServiceVulnerabilityRepository(BaseRepository[ServiceVulnerability]):
    """Repository for service-vulnerability relationship data access."""

    def __init__(self, db: Session):
        super().__init__(db, ServiceVulnerability)

    def find_by_service_id(self, service_id: str) -> List[ServiceVulnerability]:
        """Find all vulnerabilities for a specific service."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.service_id == service_id
        ).all()

    def find_by_vulnerability_id(self, vulnerability_id: str) -> List[ServiceVulnerability]:
        """Find all services affected by a specific vulnerability."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.vulnerability_id == vulnerability_id
        ).all()

    def find_by_service_and_vulnerability(self, service_id: str, vulnerability_id: str) -> Optional[ServiceVulnerability]:
        """Find specific service-vulnerability relationship."""
        return self.session.query(ServiceVulnerability).filter(
            and_(
                ServiceVulnerability.service_id == service_id,
                ServiceVulnerability.vulnerability_id == vulnerability_id
            )
        ).first()

    def find_by_confidence_level(self, confidence: ConfidenceLevel) -> List[ServiceVulnerability]:
        """Find all service vulnerabilities by confidence level."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.confidence == confidence
        ).all()

    def find_validated(self) -> List[ServiceVulnerability]:
        """Find all validated service vulnerabilities."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.validated == True
        ).all()

    def find_unvalidated(self) -> List[ServiceVulnerability]:
        """Find all unvalidated service vulnerabilities."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.validated == False
        ).all()

    def find_false_positives(self) -> List[ServiceVulnerability]:
        """Find all marked as false positives."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.false_positive == True
        ).all()

    def find_by_version_matched(self, version: str) -> List[ServiceVulnerability]:
        """Find vulnerabilities that matched a specific version."""
        return self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.version_matched == version
        ).all()

    def find_high_confidence_unvalidated(self) -> List[ServiceVulnerability]:
        """Find high confidence matches that haven't been validated yet."""
        return self.session.query(ServiceVulnerability).filter(
            and_(
                ServiceVulnerability.confidence == ConfidenceLevel.HIGH,
                ServiceVulnerability.validated == False
            )
        ).all()

    def get_confidence_statistics(self) -> Dict[str, int]:
        """Get statistics on confidence levels."""
        stats = {}
        for confidence in ConfidenceLevel:
            count = self.session.query(ServiceVulnerability).filter(
                ServiceVulnerability.confidence == confidence
            ).count()
            stats[confidence.value] = count

        return stats

    def get_validation_statistics(self) -> Dict[str, int]:
        """Get statistics on validation status."""
        total = self.session.query(ServiceVulnerability).count()
        validated = self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.validated == True
        ).count()
        false_positives = self.session.query(ServiceVulnerability).filter(
            ServiceVulnerability.false_positive == True
        ).count()

        return {
            'total': total,
            'validated': validated,
            'unvalidated': total - validated,
            'false_positives': false_positives,
            'validation_rate': (validated / total * 100) if total > 0 else 0
        }

    def mark_as_validated(self, service_vulnerability_id: str, validation_method: ValidationMethod, notes: str = None):
        """Mark a service vulnerability as validated."""
        sv = self.get_by_id(service_vulnerability_id)
        if sv:
            sv.validated = True
            sv.validation_method = validation_method
            if notes:
                sv.notes = notes
            self.session.commit()

    def mark_as_false_positive(self, service_vulnerability_id: str, notes: str = None):
        """Mark a service vulnerability as false positive."""
        sv = self.get_by_id(service_vulnerability_id)
        if sv:
            sv.false_positive = True
            sv.validated = True  # Mark as reviewed
            if notes:
                sv.notes = notes
            self.session.commit()

    def update_confidence(self, service_vulnerability_id: str, confidence: ConfidenceLevel, confidence_score: float):
        """Update confidence level and score."""
        sv = self.get_by_id(service_vulnerability_id)
        if sv:
            sv.confidence = confidence
            sv.confidence_score = confidence_score
            self.session.commit()

    def bulk_validate_high_confidence(self) -> int:
        """Bulk validate all high confidence matches. Returns count of updated records."""
        updated = self.session.query(ServiceVulnerability).filter(
            and_(
                ServiceVulnerability.confidence == ConfidenceLevel.HIGH,
                ServiceVulnerability.validated == False
            )
        ).update({
            'validated': True,
            'validation_method': ValidationMethod.AUTOMATED
        })
        self.session.commit()
        return updated

    def get_service_vulnerability_summary(self, service_id: str) -> Dict[str, Any]:
        """Get summary of vulnerabilities for a service."""
        service_vulns = self.find_by_service_id(service_id)

        summary = {
            'service_id': service_id,
            'total_vulnerabilities': len(service_vulns),
            'by_confidence': {level.value: 0 for level in ConfidenceLevel},
            'by_severity': {},
            'validated_count': 0,
            'false_positive_count': 0,
            'critical_count': 0,
            'high_count': 0
        }

        for sv in service_vulns:
            # Count by confidence
            summary['by_confidence'][sv.confidence.value] += 1

            # Count by severity
            severity = sv.vulnerability.severity.value
            summary['by_severity'][severity] = summary['by_severity'].get(severity, 0) + 1

            # Count validation status
            if sv.validated:
                summary['validated_count'] += 1
            if sv.false_positive:
                summary['false_positive_count'] += 1

            # Count critical/high severity
            if severity == 'critical':
                summary['critical_count'] += 1
            elif severity == 'high':
                summary['high_count'] += 1

        return summary