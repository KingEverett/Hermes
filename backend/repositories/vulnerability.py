from sqlalchemy.orm import Session
from models.vulnerability import Vulnerability, Severity
from uuid import UUID
from .base import BaseRepository

class VulnerabilityRepository(BaseRepository[Vulnerability]):
    def __init__(self, session: Session):
        super().__init__(session, Vulnerability)

    def get_by_cve_id(self, cve_id: str):
        """Get vulnerability by CVE ID"""
        return self.session.query(Vulnerability).filter(Vulnerability.cve_id == cve_id).first()

    def get_by_severity(self, severity: Severity, skip: int = 0, limit: int = 100):
        """Get vulnerabilities by severity"""
        return (self.session.query(Vulnerability)
                .filter(Vulnerability.severity == severity)
                .offset(skip)
                .limit(limit)
                .all())

    def get_critical_and_high(self, skip: int = 0, limit: int = 100):
        """Get critical and high severity vulnerabilities"""
        return (self.session.query(Vulnerability)
                .filter(Vulnerability.severity.in_([Severity.CRITICAL, Severity.HIGH]))
                .offset(skip)
                .limit(limit)
                .all())

    def get_with_exploits(self, skip: int = 0, limit: int = 100):
        """Get vulnerabilities with available exploits"""
        return (self.session.query(Vulnerability)
                .filter(Vulnerability.exploit_available == True)
                .offset(skip)
                .limit(limit)
                .all())

    def get_cisa_kev(self, skip: int = 0, limit: int = 100):
        """Get vulnerabilities in CISA KEV list"""
        return (self.session.query(Vulnerability)
                .filter(Vulnerability.cisa_kev == True)
                .offset(skip)
                .limit(limit)
                .all())