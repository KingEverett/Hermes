import pytest
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from fastapi.testclient import TestClient
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime, UTC
import json

from main import app
from models.vulnerability import Vulnerability, Severity
from models.service_vulnerability import ServiceVulnerability, ConfidenceLevel
from models.review_queue import ReviewQueue, ReviewStatus
from models.default_credential import DefaultCredential, CredentialRisk

client = TestClient(app)

class TestVulnerabilityAPI:
    """Test suite for vulnerability management API endpoints."""

    def setup_method(self):
        """Set up test fixtures."""
        self.test_service_id = "test-service-123"
        self.test_project_id = "test-project-456"
        self.test_reviewer_id = "reviewer-789"

    @patch('api.vulnerabilities.get_db')
    def test_analyze_service_endpoint(self, mock_get_db):
        """Test service analysis endpoint."""
        # Mock database session
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        # Mock service
        mock_service = Mock()
        mock_service.id = self.test_service_id
        mock_service.banner = "SSH-2.0-OpenSSH_8.2p1"
        mock_service.service_name = "ssh"
        mock_service.port = 22

        # Mock repositories
        with patch('api.vulnerabilities.ServiceRepository') as mock_service_repo_class:
            mock_service_repo = Mock()
            mock_service_repo.get_by_id.return_value = mock_service
            mock_service_repo_class.return_value = mock_service_repo

            with patch('api.vulnerabilities.VersionAnalysisService') as mock_version_service_class:
                mock_version_service = Mock()
                mock_version_service.analyze_service_complete.return_value = {
                    'vulnerabilities_found': 2,
                    'high_confidence_matches': 1,
                    'auto_validated': 1
                }
                mock_version_service.validate_performance.return_value = {
                    'analysis_time_seconds': 1.5,
                    'meets_3_second_requirement': True
                }
                mock_version_service_class.return_value = mock_version_service

                with patch('api.vulnerabilities.DefaultCredentialDetectionService') as mock_cred_service_class:
                    mock_cred_service = Mock()
                    mock_cred_service.analyze_service_credentials.return_value = {
                        'credentials_found': 1,
                        'critical_count': 1,
                        'service_type': 'ssh',
                        'product': 'OpenSSH',
                        'port': 22,
                        'matches': [{
                            'username': 'admin',
                            'password': 'admin',
                            'description': 'Default SSH credentials',
                            'risk_level': 'critical',
                            'confidence': 0.8,
                            'match_reason': 'Service type match'
                        }]
                    }
                    mock_cred_service_class.return_value = mock_cred_service

                    # Make request
                    response = client.post(
                        f"/api/v1/services/{self.test_service_id}/analyze",
                        json={"include_credentials": True, "confidence_threshold": 0.5}
                    )

                    assert response.status_code == 200
                    data = response.json()

                    assert data['service_id'] == self.test_service_id
                    assert 'vulnerability_analysis' in data
                    assert 'credential_analysis' in data
                    assert 'performance_metrics' in data

    @patch('api.vulnerabilities.get_db')
    def test_get_service_vulnerabilities_endpoint(self, mock_get_db):
        """Test get service vulnerabilities endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        # Mock vulnerabilities
        mock_vuln = Mock()
        mock_vuln.id = "vuln-1"
        mock_vuln.cve_id = "CVE-2024-1234"
        mock_vuln.severity = Severity.HIGH
        mock_vuln.cvss_score = 7.5
        mock_vuln.description = "Test vulnerability"
        mock_vuln.product = "OpenSSH"
        mock_vuln.vendor = "OpenBSD"

        mock_service_vuln = Mock()
        mock_service_vuln.id = "sv-1"
        mock_service_vuln.service_id = self.test_service_id
        mock_service_vuln.vulnerability = mock_vuln
        mock_service_vuln.confidence = ConfidenceLevel.HIGH
        mock_service_vuln.confidence_score = 0.9
        mock_service_vuln.version_matched = "8.2p1"
        mock_service_vuln.validated = True
        mock_service_vuln.false_positive = False
        mock_service_vuln.detected_at = datetime.now(UTC)

        with patch('api.vulnerabilities.ServiceVulnerabilityRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.find_by_service_id.return_value = [mock_service_vuln]
            mock_repo_class.return_value = mock_repo

            response = client.get(f"/api/v1/services/{self.test_service_id}/vulnerabilities")

            assert response.status_code == 200
            data = response.json()
            assert len(data) == 1
            assert data[0]['service_id'] == self.test_service_id
            assert data[0]['vulnerability']['cve_id'] == "CVE-2024-1234"

    @patch('api.vulnerabilities.get_db')
    def test_get_service_credentials_endpoint(self, mock_get_db):
        """Test get service credentials endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        # Mock credential
        mock_credential = Mock()
        mock_credential.id = "cred-1"
        mock_credential.service_id = self.test_service_id
        mock_credential.username = "admin"
        mock_credential.password = "admin"
        mock_credential.description = "Default SSH credentials"
        mock_credential.risk_level = CredentialRisk.CRITICAL
        mock_credential.confidence = 0.8
        mock_credential.service_type = "ssh"
        mock_credential.product_name = "OpenSSH"
        mock_credential.validated = False
        mock_credential.false_positive = False
        mock_credential.remediation_completed = False
        mock_credential.detected_at = datetime.now(UTC)

        with patch('api.vulnerabilities.DefaultCredentialRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.find_by_service_id.return_value = [mock_credential]
            mock_repo_class.return_value = mock_repo

            response = client.get(f"/api/v1/services/{self.test_service_id}/credentials")

            assert response.status_code == 200
            data = response.json()
            assert len(data) == 1
            assert data[0]['username'] == "admin"
            assert data[0]['risk_level'] == "critical"

    @patch('api.vulnerabilities.get_db')
    def test_get_review_queue_endpoint(self, mock_get_db):
        """Test get review queue endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        # Mock review queue item
        mock_item = Mock()
        mock_item.id = "review-1"
        mock_item.service_id = self.test_service_id
        mock_item.vulnerability_id = "vuln-1"
        mock_item.status = ReviewStatus.PENDING
        mock_item.confidence = ConfidenceLevel.MEDIUM
        mock_item.priority = "high"
        mock_item.reviewer = None
        mock_item.assigned_at = None
        mock_item.reviewed_at = None
        mock_item.review_notes = None
        mock_item.rejection_reason = None
        mock_item.detection_method = "version_match"
        mock_item.version_extracted = "8.2p1"
        mock_item.auto_assigned = datetime.now(UTC)

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.find_pending.return_value = [mock_item]
            mock_repo_class.return_value = mock_repo

            response = client.get("/api/v1/review-queue")

            assert response.status_code == 200
            data = response.json()
            assert len(data) == 1
            assert data[0]['status'] == "pending"  # Enum value is lowercase
            assert data[0]['priority'] == "high"

    @patch('api.vulnerabilities.get_db')
    def test_get_next_review_item_endpoint(self, mock_get_db):
        """Test get next review item endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        mock_item = Mock()
        mock_item.id = "review-1"
        mock_item.service_id = self.test_service_id
        mock_item.status = ReviewStatus.PENDING
        mock_item.priority = "high"

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.get_next_for_review.return_value = mock_item
            mock_repo_class.return_value = mock_repo

            response = client.get("/api/v1/review-queue/next")

            assert response.status_code == 200
            data = response.json()
            assert data['id'] == "review-1"

    @patch('api.vulnerabilities.get_db')
    def test_assign_review_item_endpoint(self, mock_get_db):
        """Test assign review item endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.assign_to_reviewer.return_value = True
            mock_repo_class.return_value = mock_repo

            response = client.post(
                f"/api/v1/review-queue/review-1/assign",
                params={"reviewer_id": self.test_reviewer_id}
            )

            assert response.status_code == 200
            data = response.json()
            assert data['reviewer_id'] == self.test_reviewer_id

    @patch('api.vulnerabilities.get_db')
    def test_approve_review_item_endpoint(self, mock_get_db):
        """Test approve review item endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        mock_item = Mock()
        mock_item.service_vulnerability_id = "sv-1"

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_review_repo_class:
            mock_review_repo = Mock()
            mock_review_repo.approve_item.return_value = True
            mock_review_repo.get_by_id.return_value = mock_item
            mock_review_repo_class.return_value = mock_review_repo

            with patch('api.vulnerabilities.ServiceVulnerabilityRepository') as mock_sv_repo_class:
                mock_sv_repo = Mock()
                mock_sv_repo.mark_as_validated.return_value = None
                mock_sv_repo_class.return_value = mock_sv_repo

                response = client.put(
                    "/api/v1/review-queue/review-1",
                    params={"reviewer_id": self.test_reviewer_id},
                    json={"action": "approve", "notes": "Looks good"}
                )

                assert response.status_code == 200
                data = response.json()
                assert "approved successfully" in data['message']

    @patch('api.vulnerabilities.get_db')
    def test_reject_review_item_endpoint(self, mock_get_db):
        """Test reject review item endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        mock_item = Mock()
        mock_item.service_vulnerability_id = "sv-1"

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_review_repo_class:
            mock_review_repo = Mock()
            mock_review_repo.reject_item.return_value = True
            mock_review_repo.get_by_id.return_value = mock_item
            mock_review_repo_class.return_value = mock_review_repo

            with patch('api.vulnerabilities.ServiceVulnerabilityRepository') as mock_sv_repo_class:
                mock_sv_repo = Mock()
                mock_sv_repo.mark_as_false_positive.return_value = None
                mock_sv_repo_class.return_value = mock_sv_repo

                response = client.put(
                    "/api/v1/review-queue/review-1",
                    params={"reviewer_id": self.test_reviewer_id},
                    json={
                        "action": "reject",
                        "rejection_reason": "False positive",
                        "notes": "Not a real vulnerability"
                    }
                )

                assert response.status_code == 200
                data = response.json()
                assert "rejected successfully" in data['message']

    @patch('api.vulnerabilities.get_db')
    def test_bulk_approve_low_risk_endpoint(self, mock_get_db):
        """Test bulk approve low risk endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.bulk_approve_low_risk.return_value = 5
            mock_repo_class.return_value = mock_repo

            response = client.post("/api/v1/review-queue/bulk-approve")

            assert response.status_code == 200
            data = response.json()
            assert "5" in data['message']

    @patch('api.vulnerabilities.get_db')
    def test_bulk_validate_high_confidence_endpoint(self, mock_get_db):
        """Test bulk validate high confidence endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        with patch('api.vulnerabilities.ServiceVulnerabilityRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.bulk_validate_high_confidence.return_value = 10
            mock_repo_class.return_value = mock_repo

            response = client.post("/api/v1/vulnerabilities/bulk-validate")

            assert response.status_code == 200
            data = response.json()
            assert "10" in data['message']

    @patch('api.vulnerabilities.get_db')
    def test_get_review_queue_statistics_endpoint(self, mock_get_db):
        """Test get review queue statistics endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        mock_stats = {
            'total_items': 25,
            'by_status': {'pending': 10, 'approved': 12, 'rejected': 3},
            'by_priority': {'high': 5, 'medium': 15, 'low': 5},
            'average_review_time_hours': 4.2
        }

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.get_queue_statistics.return_value = mock_stats
            mock_repo_class.return_value = mock_repo

            response = client.get("/api/v1/review-queue/statistics")

            assert response.status_code == 200
            data = response.json()
            assert data['total_items'] == 25
            assert data['by_status']['pending'] == 10

    @patch('api.vulnerabilities.get_db')
    def test_get_vulnerability_statistics_endpoint(self, mock_get_db):
        """Test get vulnerability statistics endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        mock_vuln_stats = {
            'total_vulnerabilities': 150,
            'by_severity': {'critical': 10, 'high': 30, 'medium': 80, 'low': 30}
        }

        mock_sv_stats = {
            'total': 45,
            'validated': 30,
            'validation_rate': 66.7
        }

        with patch('api.vulnerabilities.VulnerabilityRepository') as mock_vuln_repo_class:
            mock_vuln_repo = Mock()
            mock_vuln_repo.get_statistics.return_value = mock_vuln_stats
            mock_vuln_repo_class.return_value = mock_vuln_repo

            with patch('api.vulnerabilities.ServiceVulnerabilityRepository') as mock_sv_repo_class:
                mock_sv_repo = Mock()
                mock_sv_repo.get_validation_statistics.return_value = mock_sv_stats
                mock_sv_repo_class.return_value = mock_sv_repo

                response = client.get("/api/v1/vulnerabilities/statistics")

                assert response.status_code == 200
                data = response.json()
                assert data['vulnerability_database']['total_vulnerabilities'] == 150
                assert data['service_vulnerabilities']['validated'] == 30

    @patch('api.vulnerabilities.get_db')
    def test_get_reviewer_workload_endpoint(self, mock_get_db):
        """Test get reviewer workload endpoint."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        mock_workload = {
            'reviewer_id': self.test_reviewer_id,
            'pending_reviews': 3,
            'completed_reviews': 15,
            'total_assigned': 18
        }

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.get_reviewer_workload.return_value = mock_workload
            mock_repo_class.return_value = mock_repo

            response = client.get(f"/api/v1/reviewer/{self.test_reviewer_id}/workload")

            assert response.status_code == 200
            data = response.json()
            assert data['reviewer_id'] == self.test_reviewer_id
            assert data['pending_reviews'] == 3

    def test_invalid_review_action(self):
        """Test invalid review action handling."""
        response = client.put(
            "/api/v1/review-queue/review-1",
            params={"reviewer_id": self.test_reviewer_id},
            json={"action": "invalid_action"}
        )

        assert response.status_code == 400
        data = response.json()
        assert "must be 'approve' or 'reject'" in data['detail']

    def test_reject_without_reason(self):
        """Test reject action without providing reason."""
        response = client.put(
            "/api/v1/review-queue/review-1",
            params={"reviewer_id": self.test_reviewer_id},
            json={"action": "reject", "notes": "Some notes"}
        )

        assert response.status_code == 400
        data = response.json()
        assert "Rejection reason is required" in data['detail']

    @patch('api.vulnerabilities.get_db')
    def test_service_not_found(self, mock_get_db):
        """Test service not found error handling."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        with patch('api.vulnerabilities.ServiceRepository') as mock_service_repo_class:
            mock_service_repo = Mock()
            mock_service_repo.get_by_id.return_value = None
            mock_service_repo_class.return_value = mock_service_repo

            response = client.post(
                "/api/v1/services/nonexistent-service/analyze",
                json={"include_credentials": True}
            )

            assert response.status_code == 404
            data = response.json()
            assert "Service not found" in data['detail']

    @patch('api.vulnerabilities.get_db')
    def test_no_next_review_item(self, mock_get_db):
        """Test no next review item available."""
        mock_db = Mock()
        mock_get_db.return_value = mock_db

        with patch('api.vulnerabilities.ReviewQueueRepository') as mock_repo_class:
            mock_repo = Mock()
            mock_repo.get_next_for_review.return_value = None
            mock_repo_class.return_value = mock_repo

            response = client.get("/api/v1/review-queue/next")

            assert response.status_code == 404
            data = response.json()
            assert "No items pending review" in data['detail']