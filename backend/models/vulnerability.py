from sqlalchemy import Column, String, Text, Float, Boolean, JSON, Enum, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from .base import BaseModel
import enum

class Severity(enum.Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class Vulnerability(BaseModel):
    __tablename__ = "vulnerabilities"

    cve_id = Column(String(20), unique=True, nullable=False)
    cvss_score = Column(Float)
    severity = Column(Enum(Severity), nullable=False)
    description = Column(Text)
    remediation = Column(Text)
    exploit_available = Column(Boolean, default=False)
    references = Column(JSON)
    cisa_kev = Column(Boolean, default=False)

    # New fields for version-based vulnerability matching
    product = Column(String(255))  # Product name (e.g., "OpenSSH", "Apache httpd")
    vendor = Column(String(255))   # Vendor name (e.g., "OpenBSD", "Apache Software Foundation")
    affected_versions = Column(JSON)  # List of affected version ranges
    published_date = Column(DateTime(timezone=True))
    modified_date = Column(DateTime(timezone=True))

    # Vulnerability source and validation
    source = Column(String(100), default='manual')  # 'nvd', 'manual', 'vendor'
    validated = Column(Boolean, default=False)
    validation_notes = Column(Text)

    # Relationships
    services = relationship("ServiceVulnerability", back_populates="vulnerability", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Vulnerability(id={self.id}, cve_id='{self.cve_id}', product='{self.product}', severity='{self.severity}')>"