from sqlalchemy import Column, ForeignKey, DateTime, Boolean, Text, JSON, Enum, String, Float
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from .base import BaseModel
import enum

class ConfidenceLevel(enum.Enum):
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"

class ValidationMethod(enum.Enum):
    MANUAL = "manual"
    AUTOMATED = "automated"
    VERSION_MATCH = "version_match"
    BANNER_ANALYSIS = "banner_analysis"

class ServiceVulnerability(BaseModel):
    __tablename__ = "service_vulnerabilities"

    service_id = Column(UUID(as_uuid=True), ForeignKey("services.id", ondelete="CASCADE"), nullable=False)
    vulnerability_id = Column(UUID(as_uuid=True), ForeignKey("vulnerabilities.id", ondelete="CASCADE"), nullable=False)

    # Additional fields for the relationship
    detected_at = Column(DateTime(timezone=True))
    confirmed = Column(Boolean, default=False)
    false_positive = Column(Boolean, default=False)
    notes = Column(Text)
    evidence = Column(JSON)

    # New fields for version analysis
    confidence = Column(Enum(ConfidenceLevel), nullable=False, default=ConfidenceLevel.MEDIUM)
    validated = Column(Boolean, default=False)
    validation_method = Column(Enum(ValidationMethod))
    version_matched = Column(String(255))  # The specific version that triggered the match
    confidence_score = Column(Float)  # Numeric confidence score (0.0-1.0)
    confidence_factors = Column(JSON)  # Detailed scoring components (source_reliability, data_freshness, validation_status)
    extraction_method = Column(String(100))  # How the version was extracted

    # Validation and staleness tracking
    validation_status = Column(String(50), default='pending')  # pending, approved, rejected, needs_review
    validated_at = Column(DateTime(timezone=True))
    validated_by = Column(String(255))
    last_refreshed_at = Column(DateTime(timezone=True))
    is_stale = Column(Boolean, default=False)
    stale_reason = Column(Text)

    # Relationships
    service = relationship("Service", back_populates="vulnerabilities")
    vulnerability = relationship("Vulnerability", back_populates="services")

    def __repr__(self):
        return f"<ServiceVulnerability(service_id={self.service_id}, vulnerability_id={self.vulnerability_id})>"